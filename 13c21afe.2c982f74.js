(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{100:function(e,n,r){"use strict";r.d(n,"a",(function(){return s})),r.d(n,"b",(function(){return f}));var t=r(0),o=r.n(t);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=o.a.createContext({}),p=function(e){var n=o.a.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},s=function(e){var n=p(e.components);return o.a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(r),m=t,f=s["".concat(i,".").concat(m)]||s[m]||u[m]||a;return r?o.a.createElement(f,c(c({ref:n},d),{},{components:r})):o.a.createElement(f,c({ref:n},d))}));function f(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var d=2;d<a;d++)i[d]=r[d];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},70:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return c})),r.d(n,"toc",(function(){return l})),r.d(n,"default",(function(){return p}));var t=r(3),o=r(7),a=(r(0),r(100)),i={id:"doc24",title:"Write A Recorder Plugin",sidebar_label:"Recorder Plugin",slug:"/plugin"},c={unversionedId:"doc24",id:"doc24",isDocsHomePage:!1,title:"Write A Recorder Plugin",description:"`ts",source:"@site/docs/plugin.md",slug:"/plugin",permalink:"/docs/plugin",editUrl:"https://github.com/oct16/TimeCat-Docs/edit/master/docs/plugin.md",version:"current",lastUpdatedBy:"oct16",sidebar_label:"Recorder Plugin",sidebar:"someSidebar",previous:{title:"Player Options",permalink:"/docs/player-options"},next:{title:"Create a New Recording",permalink:"/docs/step-by-step"}},l=[],d={toc:l};function p(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},d,r,{components:n,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import { Watcher } from '@timecat/recorder'\n\n// define error watcher example\nclass LogErrorWatcher extends Watcher {\n    init() {\n        window.addEventListener('error', ErrorEvent => {\n            const { message, filename, lineno, colno, error } = ErrorEvent\n            this.emitData('type your define', { message, filename, lineno, colno, error })\n        })\n    }\n}\n\nclass ExamplePlugin {\n    constructor(options) {\n        /** init plugin options */\n    }\n\n    apply(recorder) {\n        const { plugin, db, addWatcher } = recorder\n\n        recorder.onData(async (data: RecordData, next: () => Promise<void>) => {\n            // get or set record\n            await next()\n            // get or set record\n        })\n\n        addWatcher(LogErrorWatcher)\n\n        type HooksType = 'beforeRun' | 'run' | 'emit' | 'end'\n        \n        plugin(HooksType, () => void)\n        \n        // emitData before save\n        plugin('emit', record => {\n            // get or set record\n            record['some property'] = doSomething\n        })\n\n        plugin('end', () => {\n            console.log('recording finish')\n        })\n\n        // read or write to indexedDB\n        const records = await db.readRecords()\n        db.deleteRecords(range: { lowerBound: <recordID>, upperBound: <recordID> })\n        db.clear()\n        db.doSomething()...\n    }\n}\n\nnew Recorder({ plugins: [new ExamplePlugin(options...)] })\n")))}p.isMDXComponent=!0}}]);