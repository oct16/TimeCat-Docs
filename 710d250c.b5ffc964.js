(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{101:function(e,r,n){"use strict";n.d(r,"a",(function(){return u})),n.d(r,"b",(function(){return f}));var t=n(0),o=n.n(t);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),d=function(e){var r=o.a.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=d(e.components);return o.a.createElement(p.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},m=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=t,f=u["".concat(c,".").concat(m)]||u[m]||s[m]||i;return n?o.a.createElement(f,a(a({ref:r},p),{},{components:n})):o.a.createElement(f,a({ref:r},p))}));function f(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,c=new Array(i);c[0]=m;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:t,c[1]=a;for(var p=2;p<i;p++)c[p]=n[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return c})),n.d(r,"metadata",(function(){return a})),n.d(r,"toc",(function(){return l})),n.d(r,"default",(function(){return d}));var t=n(3),o=n(7),i=(n(0),n(101)),c={id:"doc24",title:"Write A Recorder Plugin",sidebar_label:"Recorder Plugin",slug:"/plugin"},a={unversionedId:"doc24",id:"doc24",isDocsHomePage:!1,title:"Write A Recorder Plugin",description:"`ts",source:"@site/docs/write-plugin.md",slug:"/plugin",permalink:"/docs/plugin",editUrl:"https://github.com/oct16/TimeCat-Docs/edit/master/docs/write-plugin.md",version:"current",lastUpdatedBy:"oct16",sidebar_label:"Recorder Plugin",sidebar:"someSidebar",previous:{title:"Player Options",permalink:"/docs/player-options"},next:{title:"Create a New Recording",permalink:"/docs/step-by-step"}},l=[],p={toc:l};function d(e){var r=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},p,n,{components:r,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"import { Watcher } from '@timecat/recorder'\n\n// define error watcher example\nclass LogErrorWatcher extends Watcher {\n    init() {\n        window.addEventListener('error', ErrorEvent => {\n            const { message, filename, lineno, colno, error } = ErrorEvent\n            this.emitData('type your define', { message, filename, lineno, colno, error })\n        })\n    }\n}\n\nclass ExamplePlugin {\n    constructor(options) { /** init plugin options */ }\n\n    apply(recorder) {\n        const { plugin, db, addWatcher } = recorder\n\n        addWatcher(LogErrorWatcher)\n\n        type HooksType = 'beforeRun' | 'run' | 'emit' | 'end'\n        \n        plugin(HooksType, () => void)\n        \n        plugin('emit', record => {\n            // get record\n            console.log(record)\n            // you can modify record here\n            record['some property'] = doSomething\n        })\n\n        plugin('end', () => {\n            console.log('recording finish')\n        })\n\n        // read or write to indexedDB\n        const records = await db.readRecords()\n        db.deleteRecords(range: { lowerBound: <recordID>, upperBound: <recordID> })\n        db.clear()\n        db.doSomething()...\n    }\n}\n\nnew Recorder({ plugins: [new ExamplePlugin(options...)] })\n")))}d.isMDXComponent=!0}}]);